@import "base/mixins";
@import "components/chapters";

$light: #9fa8a8;
$dark: #0f1020;
$fonts: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande", "Lucida Sans Unicode", Verdana,
	sans-serif;

$a-tags: "a, a:active, a:hover, a:visited";
$headers: "h1, h2, h3, h4, h5, h6";

* {
	margin: 0;
	padding: 0;
	color: unset;
	font-family: $fonts;
}

body {
	background-color: $light;
	color: $dark;
}

// ##──── Alignment ─────────────────────────────────────────────────────────────────────────
#app {
	display: grid;
	padding: 0 4vw;

	@include tablet {
		grid-template-columns: auto 1fr;
	}

	@include desktop {
		padding: 0;
		grid-template-columns: auto 1fr;
	}
}

article {
	overflow-x: hidden;
	max-width: 100vw;
	grid-row: 1;
	grid-column: 1;
	// Fix so the article doesn't stick at the bottom of the page
	margin-bottom: 2ch;
	@include desktop {
		grid-row: 1;
		grid-column: 1;
	}
}

#content-wrapper {
	grid-row: 2;
	grid-column: 1;
	@include desktop {
		grid-row: 1;
		grid-row: 2;
	}
}

article {
	@include desktop {
		margin-right: 10vw;
	}
}

// ##──── Nav ───────────────────────────────────────────────────────────────────────────────
nav {
	// The nav is a desktop first component
	@include mobile {
		display: none;
	}

	// This is the desktop styling
	display: grid;
	grid-template-rows: repeat(4, auto) 1fr;
	height: calc(100% - 200px); // allow everything to fit in 1 col. subtract the padding-top
	padding: 0 5ch; // pad either side so text doesn't stick too close to the nav
	padding-top: 200px;
	margin-right: 12ch; // pad between the nav and the article
	flex-direction: column; // a column sticks all the flex items up the top

	@include tablet {
		// reduce the space between the nav and the article
		margin: unset;
	}
}

.nav-section {
	min-width: 100px; // loosely guess the size of a nav box
	text-align: right;
	width: 120px; // make all the nav sections 120px wide
	margin: 2.5ch 0; // pad the top/btm of each nav section so they don't stick to each other
	* {
		// handle overflowing text in nav sections so they don't cause any scrolling/wrapping
		text-overflow: ellipsis;
		overflow: hidden;
		white-space: nowrap;
	}
}

.nav-subsection {
	margin: 0.5ch 0;
}

.nav-bottom {
	margin-top: auto;
}

// organize the prev and next nav links
.nav-link {
	display: grid;
	grid-template-columns: auto 1fr;
	span {
		display: inline;
	}
}

// ##──── Typography ────────────────────────────────────────────────────────────────────────
#heading {
	font-size: 50px;
	padding: 50px 0 50px 0;
	border-bottom: 10px solid gray;
	box-sizing: border-box;
}

article {
	// margin: 2ch;
	// Extra fancy H1 if its the first one
	h1:not(:first-of-type) {
		font-size: 50px;
		padding: 50px 0 50px 0;
		border-bottom: 10px solid gray;
		box-sizing: border-box;
	}

	// Regular H1s after the fancy one
	h1 {
		font-size: 50px;
		padding: 50px 0 50px 0;
	}

	// H2 gets a lot of padding
	h2:not(first-child) {
		margin-top: 3em;
	}

	// H3 gets a little bit of padding
	h3:not(first-child) {
		margin-top: 1.5em;
	}

	// Set an aesthetic style height
	span,
	p {
		line-height: 150%;
	}

	// Make sure you leave this, without it lists wont even get a circle/square ::marker
	ul {
		margin-left: 2ch;
	}
}

// ##──── Code ────────────────────────────────────────────────────────────────────────────
article {
	.code-wrapper {
		display: grid;
		grid-template-columns: 70px 1fr;
		background-color: $dark;
		color: $light;

		// pad the code block itself (not the left button)
		.codeblock-wrapper {
			grid-column: 2;
			margin: 1ch;
			// Scroll the code when it overflows
			overflow-x: scroll;
			-ms-overflow-style: none; /* IE and Edge */
			scrollbar-width: none; /* Firefox */
		}

		// code block labels
		.codeblock-label {
			grid-column: 1;
			background-color: lighten($dark, 20%);
			cursor: pointer;
			display: flex;
			justify-content: center;
			align-items: center;
			&:hover {
				background-color: lighten($dark, 30%);
			}
		}

		.codeblock-output-label {
			cursor: unset;
			&:hover {
				background-color: lighten($dark, 20%);
			}
		}
	}

	// A code block followed by anything that isn't its "output" ill be padded
	// we also DON'T want to pad code + p because p already has adequate padding itself...
	// and then the margin we apply to the code-wrapper would conflict and the top vs btm spacing would be uneven
	.code-wrapper + :not(.is-output):not(p) {
		margin-top: 2em;
	}

	// h1, h2, h3, h4, h5, h6 {
	// 	margin-top: unset;
	// }

	// "output" language
	.is-output {
		background-color: lighten($dark, 20%);
		color: $light;
		.codeblock-label {
			color: $light;
		}
	}

	// inline code stuff
	code:not([class]) {
		background-color: rgba(48, 51, 101, 0.2);
		padding: 0 0.5ch;
		color: $dark;
		word-break: break-all;
		display: inline-block;
	}
}

// pad text if its got a code block ABOVE and BELOW it
.code-wrapper + :not(.code-wrapper),
:not(.code-wrapper) + .code-wrapper {
	margin-top: 2ch;
}
